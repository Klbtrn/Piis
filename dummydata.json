[
  {
    "task_name": "IndentationError in Python",
    "prompt": "IndentationError in Python",
    "solution": "def greet():\n    print(\"Hello\")",
    "hintText": "Check your indentation levels.",
    "hintCode": "def greet():\nprint(\"Hello\")",
    "status": "Backlog",
    "language": "python",
    "hintCount": 1,
    "hintsUsed": 0
  },
  {
    "task_name": "Wrong Loop Condition in JavaScript",
    "prompt": "Wrong loop condition",
    "solution": "for (let i = 0; i < 10; i++) { console.log(i); }",
    "hintText": "Check the loop condition.",
    "hintCode": "for (let i = 1; i <= 10; i++)",
    "status": "Repeat",
    "language": "javascript",
    "hintCount": 2,
    "hintsUsed": 1
  },
  {
    "task_name": "Null Pointer Exception",
    "prompt": "Null Pointer Exception",
    "solution": "if (object != null) { object.doSomething(); }",
    "hintText": "Check if object is null before using it.",
    "hintCode": "object.doSomething();",
    "status": "InProgress",
    "language": "c",
    "hintCount": 2,
    "hintsUsed": 2
  },
  {
    "task_name": "Type Mismatch in Haskell",
    "prompt": "Type Mismatch in Haskell",
    "solution": "add :: Int -> Int -> Int\nadd x y = x + y",
    "hintText": "Make sure your types match.",
    "hintCode": "add x y = x + y",
    "status": "Done",
    "language": "haskell",
    "hintCount": 0,
    "hintsUsed": 2
  },
  {
    "task_name": "Bug in Gradient Descent",
    "prompt": "Bug in Gradient Descent",
    "solution": "theta = theta - alpha * gradient",
    "hintText": "Check your gradient update rule.",
    "hintCode": "theta = theta + alpha * gradient",
    "status": "Done",
    "language": "python",
    "hintCount": 1,
    "hintsUsed": 1
  },
  {
    "task_name": "Gnome Sort Implementation",
    "prompt": "Faulty Gnome Sort Implementation",
    "solution": "def gnome_sort(arr):\n    index = 0\n    n = len(arr)\n\n    while index < n:\n        if index == 0:\n            index += 1\n        if arr[index] >= arr[index - 1]:\n            index += 1\n        else:\n            # Tausche die Werte\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index -= 1\n    return arr\n\n# Beispielverwendung\nunsorted_list = [34, 2, 78, 1, 56, 99, 23]\nsorted_list = gnome_sort(unsorted_list)\nprint(\"Sortierte Liste:\", sorted_list)",
    "hintText": "Imagine you're sorting cards laid out on a table from left to right. If the current card is not smaller than the card to its left, you take a step forward. If it is smaller, you swap the two cards and take a step backward. You repeat this process until you've walked all the way to the right â€” then the list is sorted!",
    "hintCode": "def gnome_sort(arr):\n    index = 0\n    n = len(arr)\n\n    while index < n:\n    #TODO\n\n    return arr\n\n# Beispielverwendung\nunsorted_list = [34, 2, 78, 1, 56, 99, 23]\nsorted_list = gnome_sort(unsorted_list)\nprint(\"Sortierte Liste:\", sorted_list)",
    "difficultyLevel": "medium",
    "status": "InProgress",
    "task": "def gnome_sort(arr):\n    #TODO: Implement the gnome sort algorithm\n\n# Beispielverwendung\nunsorted_list = [34, 2, 78, 1, 56, 99, 23]\nsorted_list = gnome_sort(unsorted_list)\nprint(\"Sortierte Liste:\", sorted_list)",
    "language": "python",
    "hintCount": 1,
    "hintsUsed": 1,
    "textHintUsed": true,
    "codeHintUsed": false,
    "editorContent": "def gradient_descent(theta, alpha, gradient):\n    theta = theta - alpha * gradient\n    return theta\n\n# === Test cases ===\nprint(gradient_descent(0, 0.1, 1))  # Expected: -0.1\nprint(gradient_descent(1, 0.01, 0.1)) # Expected: 0.9999\n",
    "duggyFeedback": "The general implementation looks good. But there still is an issue with the indexing.",
    "createdAt": "2025-07-07T12:00:00Z"
  }
]
