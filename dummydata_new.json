[
  {
    "prompt": "Convert Temperature Celsius to Fahrenheit",
    "task_name": "Celsius to Fahrenheit",
    "solution": "function toFahrenheit(celsius) {\n  return (celsius * 9/5) + 32;\n}",
    "hintText": "Use the formula (celsius * 9/5) + 32.",
    "hintCode": "function toFahrenheit(celsius) {\n  // Apply the formula\n}",
    "difficultyLevel": "beginner",
    "status": "Backlog",
    "attempts": 2,
    "successfulReviews": 3,
    "lastReviewDate": "2025-07-21T09:19:40.239571",
    "nextReviewDate": "2025-08-01T09:19:40.239571",
    "difficultyFactor": 3.4,
    "currentInterval": 4,
    "task": "Write a function that converts Celsius to Fahrenheit.\n\nfunction toFahrenheit(celsius) {\n  // your code here\n}",
    "keyConcepts": ["math", "conversion", "temperature"],
    "hintCount": 2,
    "hintsUsed": 2,
    "triedCount": 2,
    "textHintUsed": true,
    "codeHintUsed": true,
    "editorContent": "function toFahrenheit(celsius) {\n  \n}",
    "language": "javascript",
    "duggyFeedback": "Solid application of a well-known formula.",
    "createdAt": "2025-07-21T09:19:40.239571"
  },
  {
    "prompt": "Find All Even Numbers",
    "task_name": "Even Numbers Filter",
    "solution": "def filter_even(numbers):\n  return [n for n in numbers if n % 2 == 0]",
    "hintText": "Use list comprehension or a filter.",
    "hintCode": "def filter_even(numbers):\n  # Use n % 2 == 0\n",
    "difficultyLevel": "beginner",
    "status": "Repeat",
    "attempts": 4,
    "successfulReviews": 2,
    "lastReviewDate": "2025-07-21T09:19:40.239616",
    "nextReviewDate": "2025-07-30T09:19:40.239616",
    "difficultyFactor": 2.7,
    "currentInterval": 6,
    "task": "Write a function that filters out even numbers from a list.\n\ndef filter_even(numbers):\n  # your code here",
    "keyConcepts": ["filtering", "list", "modulo"],
    "hintCount": 2,
    "hintsUsed": 2,
    "triedCount": 5,
    "textHintUsed": true,
    "codeHintUsed": true,
    "editorContent": "def filter_even(numbers):\n  \n",
    "language": "python",
    "duggyFeedback": "Clear and Pythonic filtering.",
    "createdAt": "2025-07-21T09:19:40.239616"
  },
  {
    "prompt": "Create a Countdown Timer",
    "task_name": "Countdown Timer",
    "solution": "function countdown(n) {\n  if (n < 0) return;\n  console.log(n);\n  setTimeout(() => countdown(n - 1), 1000);\n}",
    "hintText": "Use a loop or recursion with setTimeout.",
    "hintCode": "function countdown(n) {\n  // Consider recursion with setTimeout\n}",
    "difficultyLevel": "intermediate",
    "status": "InProgress",
    "attempts": 4,
    "successfulReviews": 1,
    "lastReviewDate": "2025-07-21T09:19:40.239628",
    "nextReviewDate": "2025-08-02T09:19:40.239628",
    "difficultyFactor": 1.7,
    "currentInterval": 4,
    "task": "Write a function that logs a countdown from a given number to zero.\n\nfunction countdown(n) {\n  // your code here\n}",
    "keyConcepts": ["recursion", "timing", "setTimeout"],
    "hintCount": 2,
    "hintsUsed": 1,
    "triedCount": 4,
    "textHintUsed": true,
    "codeHintUsed": true,
    "editorContent": "function countdown(n) {\n  \n}",
    "language": "javascript",
    "duggyFeedback": "Good recursive use of timers!",
    "createdAt": "2025-07-21T09:19:40.239628"
  },
  {
    "prompt": "Sum of Nested List Elements",
    "task_name": "Sum Nested List",
    "solution": "def sum_nested(lst):\n  return sum(sum(inner) for inner in lst)",
    "hintText": "Use nested loops or comprehensions.",
    "hintCode": "def sum_nested(lst):\n  # Use sum() with inner and outer loops\n",
    "difficultyLevel": "intermediate",
    "status": "Repeat",
    "attempts": 2,
    "successfulReviews": 2,
    "lastReviewDate": "2025-07-21T09:19:40.239639",
    "nextReviewDate": "2025-08-01T09:19:40.239639",
    "difficultyFactor": 3.4,
    "currentInterval": 9,
    "task": "Write a function that calculates the total of all numbers in a 2D list.\n\ndef sum_nested(lst):\n  # your code here",
    "keyConcepts": ["nested list", "sum", "comprehension"],
    "hintCount": 2,
    "hintsUsed": 2,
    "triedCount": 4,
    "textHintUsed": true,
    "codeHintUsed": false,
    "editorContent": "def sum_nested(lst):\n  \n",
    "language": "python",
    "duggyFeedback": "Efficient use of nested comprehensions!",
    "createdAt": "2025-07-21T09:19:40.239639"
  },
  {
    "prompt": "Validate Phone Number Format",
    "task_name": "Phone Number Validator",
    "solution": "function validatePhone(str) {\n  return /^\\(\\d{3}\\) \\d{3}-\\d{4}$/.test(str);\n}",
    "hintText": "Use regex to define the format.",
    "hintCode": "function validatePhone(str) {\n  // Use /^\\(\\d{3}\\) \\d{3}-\\d{4}$/\n}",
    "difficultyLevel": "advanced",
    "status": "Backlog",
    "attempts": 3,
    "successfulReviews": 3,
    "lastReviewDate": "2025-07-21T09:19:40.239651",
    "nextReviewDate": "2025-07-30T09:19:40.239651",
    "difficultyFactor": 2.4,
    "currentInterval": 1,
    "task": "Write a function to check if a string matches the format (XXX) XXX-XXXX.\n\nfunction validatePhone(str) {\n  // your code here\n}",
    "keyConcepts": ["regex", "string validation"],
    "hintCount": 2,
    "hintsUsed": 1,
    "triedCount": 3,
    "textHintUsed": true,
    "codeHintUsed": true,
    "editorContent": "function validatePhone(str) {\n  \n}",
    "language": "javascript",
    "duggyFeedback": "Strong application of regex pattern matching.",
    "createdAt": "2025-07-21T09:19:40.239651"
  },
  {
    "prompt": "Check Balanced Parentheses",
    "task_name": "Balanced Parentheses",
    "solution": "def is_balanced(s):\n  stack = []\n  for char in s:\n    if char == '(': stack.append(char)\n    elif char == ')':\n      if not stack: return False\n      stack.pop()\n  return not stack",
    "hintText": "Use a counter or a stack.",
    "hintCode": "def is_balanced(s):\n  # Track open and close brackets\n",
    "difficultyLevel": "advanced",
    "status": "Backlog",
    "attempts": 4,
    "successfulReviews": 0,
    "lastReviewDate": "2025-07-21T09:19:40.239662",
    "nextReviewDate": "2025-07-29T09:19:40.239662",
    "difficultyFactor": 3.0,
    "currentInterval": 4,
    "task": "Write a function that checks if the parentheses in a string are balanced.\n\ndef is_balanced(s):\n  # your code here",
    "keyConcepts": ["stack", "brackets", "validation"],
    "hintCount": 2,
    "hintsUsed": 1,
    "triedCount": 1,
    "textHintUsed": true,
    "codeHintUsed": false,
    "editorContent": "def is_balanced(s):\n  \n",
    "language": "python",
    "duggyFeedback": "Classic use case for stack implementation.",
    "createdAt": "2025-07-21T09:19:40.239662"
  },
  {
    "prompt": "Sort Object by Property",
    "task_name": "Sort Object Array",
    "solution": "function sortByScore(arr) {\n  return arr.sort((a, b) => a.score - b.score);\n}",
    "hintText": "Use array sort with custom comparator.",
    "hintCode": "function sortByScore(arr) {\n  // Use arr.sort((a, b) => a.score - b.score)\n}",
    "difficultyLevel": "intermediate",
    "status": "InProgress",
    "attempts": 1,
    "successfulReviews": 2,
    "lastReviewDate": "2025-07-21T09:19:40.239673",
    "nextReviewDate": "2025-07-25T09:19:40.239673",
    "difficultyFactor": 2.6,
    "currentInterval": 2,
    "task": "Write a function that sorts an array of objects by a numeric 'score' property.\n\nfunction sortByScore(arr) {\n  // your code here\n}",
    "keyConcepts": ["sorting", "objects", "comparator"],
    "hintCount": 2,
    "hintsUsed": 2,
    "triedCount": 3,
    "textHintUsed": true,
    "codeHintUsed": false,
    "editorContent": "function sortByScore(arr) {\n  \n}",
    "language": "javascript",
    "duggyFeedback": "Clean and functional sorting!",
    "createdAt": "2025-07-21T09:19:40.239673"
  },
  {
    "prompt": "Generate Fibonacci Series",
    "task_name": "Fibonacci List",
    "solution": "def fibonacci_list(n):\n  if n <= 0: return []\n  seq = [0, 1]\n  while len(seq) < n:\n    seq.append(seq[-1] + seq[-2])\n  return seq[:n]",
    "hintText": "Use a loop and two variables to track the last two numbers.",
    "hintCode": "def fibonacci_list(n):\n  # Iteratively append new numbers\n",
    "difficultyLevel": "intermediate",
    "status": "Repeat",
    "attempts": 2,
    "successfulReviews": 0,
    "lastReviewDate": "2025-07-21T09:19:40.239683",
    "nextReviewDate": "2025-07-28T09:19:40.239683",
    "difficultyFactor": 1.8,
    "currentInterval": 7,
    "task": "Create a function that returns the first n Fibonacci numbers.\n\ndef fibonacci_list(n):\n  # your code here",
    "keyConcepts": ["fibonacci", "loop", "math"],
    "hintCount": 2,
    "hintsUsed": 1,
    "triedCount": 6,
    "textHintUsed": true,
    "codeHintUsed": false,
    "editorContent": "def fibonacci_list(n):\n  \n",
    "language": "python",
    "duggyFeedback": "Nice iterative series generation!",
    "createdAt": "2025-07-21T09:19:40.239683"
  },
  {
    "prompt": "Title Case a String",
    "task_name": "Title Case",
    "solution": "function titleCase(str) {\n  return str.split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1).toLowerCase()).join(' ');\n}",
    "hintText": "Use split, map, and join.",
    "hintCode": "function titleCase(str) {\n  // str.split(' ').map(w => ...).join(' ')\n}",
    "difficultyLevel": "beginner",
    "status": "InProgress",
    "attempts": 4,
    "successfulReviews": 2,
    "lastReviewDate": "2025-07-21T09:19:40.239694",
    "nextReviewDate": "2025-07-28T09:19:40.239694",
    "difficultyFactor": 2.4,
    "currentInterval": 5,
    "task": "Write a function that title-cases a string (first letter of each word capitalized).\n\nfunction titleCase(str) {\n  // your code here\n}",
    "keyConcepts": ["string", "map", "join"],
    "hintCount": 2,
    "hintsUsed": 1,
    "triedCount": 2,
    "textHintUsed": true,
    "codeHintUsed": false,
    "editorContent": "function titleCase(str) {\n  \n}",
    "language": "javascript",
    "duggyFeedback": "Great use of string chaining!",
    "createdAt": "2025-07-21T09:19:40.239694"
  },
  {
    "prompt": "Find Intersection of Two Lists",
    "task_name": "List Intersection",
    "solution": "def list_intersection(a, b):\n  return list(set(a) & set(b))",
    "hintText": "Convert one list to a set for fast lookup.",
    "hintCode": "def list_intersection(a, b):\n  # Use set(a) & set(b)\n",
    "difficultyLevel": "beginner",
    "status": "Backlog",
    "attempts": 3,
    "successfulReviews": 4,
    "lastReviewDate": "2025-07-21T09:19:40.239725",
    "nextReviewDate": "2025-07-31T09:19:40.239725",
    "difficultyFactor": 2.3,
    "currentInterval": 3,
    "task": "Write a function that returns the intersection of two lists (common elements).\n\ndef list_intersection(a, b):\n  # your code here",
    "keyConcepts": ["set", "intersection", "list"],
    "hintCount": 2,
    "hintsUsed": 2,
    "triedCount": 2,
    "textHintUsed": true,
    "codeHintUsed": false,
    "editorContent": "def list_intersection(a, b):\n  \n",
    "language": "python",
    "duggyFeedback": "Efficient set-based intersection!",
    "createdAt": "2025-07-21T09:19:40.239725"
  },
  {
    "prompt": "Capitalize Sentences",
    "task_name": "Capitalize Sentences",
    "solution": "def capitalize_sentences(text):\n  return '. '.join(s.strip().capitalize() for s in text.split('.'))",
    "hintText": "Split the text using '.', capitalize each part.",
    "hintCode": "def capitalize_sentences(text):\n  # Use split('.') and strip/capitalize\n",
    "difficultyLevel": "beginner",
    "status": "Done",
    "attempts": 2,
    "successfulReviews": 2,
    "lastReviewDate": "2025-07-21T09:05:19.230339",
    "nextReviewDate": "2025-07-24T09:05:19.230339",
    "difficultyFactor": 2.7,
    "currentInterval": 5,
    "task": "Write a function that capitalizes the first letter of each sentence in a paragraph.\n\ndef capitalize_sentences(text):\n  # your code here",
    "keyConcepts": ["text processing", "split", "capitalize"],
    "hintCount": 2,
    "hintsUsed": 2,
    "triedCount": 2,
    "textHintUsed": true,
    "codeHintUsed": true,
    "editorContent": "def capitalize_sentences(text):\n  \n",
    "language": "python",
    "duggyFeedback": "Text transformation works great!",
    "createdAt": "2025-07-21T09:05:19.230339"
  },
  {
    "prompt": "Count Vowels in a String",
    "task_name": "Vowel Counter",
    "solution": "function countVowels(str) {\n  return (str.match(/[aeiou]/gi) || []).length;\n}",
    "hintText": "Use a regex or loop to count vowels.",
    "hintCode": "function countVowels(str) {\n  // Use match with regex /[aeiou]/gi\n}",
    "difficultyLevel": "advanced",
    "status": "Done",
    "attempts": 4,
    "successfulReviews": 3,
    "lastReviewDate": "2025-07-21T09:05:19.230354",
    "nextReviewDate": "2025-08-02T09:05:19.230354",
    "difficultyFactor": 2.1,
    "currentInterval": 9,
    "task": "Create a function that counts the number of vowels in a given string.\n\nfunction countVowels(str) {\n  // your code here\n}",
    "keyConcepts": ["regex", "string", "loop"],
    "hintCount": 2,
    "hintsUsed": 2,
    "triedCount": 4,
    "textHintUsed": true,
    "codeHintUsed": false,
    "editorContent": "function countVowels(str) {\n  \n}",
    "language": "javascript",
    "duggyFeedback": "Well done! Regex was the right choice.",
    "createdAt": "2025-07-21T09:05:19.230354"
  },
  {
    "prompt": "Reverse Words in Sentence",
    "task_name": "Reverse Sentence Words",
    "solution": "def reverse_words(sentence):\n  return ' '.join(reversed(sentence.split()))",
    "hintText": "Split the sentence and reverse the list.",
    "hintCode": "def reverse_words(sentence):\n  # Use split and reversed\n",
    "difficultyLevel": "advanced",
    "status": "Done",
    "attempts": 4,
    "successfulReviews": 0,
    "lastReviewDate": "2025-07-21T09:05:19.230214",
    "nextReviewDate": "2025-07-24T09:05:19.230214",
    "difficultyFactor": 3.1,
    "currentInterval": 6,
    "task": "Write a function that reverses the words in a sentence but not the characters.\n\ndef reverse_words(sentence):\n  # your code here",
    "keyConcepts": ["string", "split", "reverse"],
    "hintCount": 2,
    "hintsUsed": 1,
    "triedCount": 3,
    "textHintUsed": true,
    "codeHintUsed": false,
    "editorContent": "def reverse_words(sentence):\n  \n",
    "language": "python",
    "duggyFeedback": "Clean logic and Pythonic.",
    "createdAt": "2025-07-21T09:05:19.230214"
  }
]
