[
  {
    "prompt": "Calculate Average Word Length in a Sentence",
    "task_name": "Average Word Length",
    "solution": "def average_word_length(sentence):\n  words = sentence.split()\n  total_length = sum(len(word) for word in words)\n  return total_length / len(words) if words else 0",
    "hintText": "Split the sentence into words and calculate the average length by dividing total characters by the number of words. Watch out for empty input!",
    "hintCode": "def average_word_length(sentence):\n  words = sentence.split()\n  # Calculate total length and divide by word count\n",
    "difficultyLevel": "intermediate",
    "status": "Backlog",
    "attempts": 1,
    "successfulReviews": 2,
    "lastReviewDate": "2025-07-24T14:48:13.281705",
    "nextReviewDate": "2025-07-28T14:48:13.281705",
    "difficultyFactor": 3.3,
    "currentInterval": 3,
    "taskText": "Write a Python function that calculates the average length of words in a sentence. The function should ignore extra spaces and handle empty strings by returning 0.",
    "taskCode": "def average_word_length(sentence):\n  # Split the sentence into words\n  # Sum their lengths and divide by the number of words\n  # Return 0 if the input is empty\n",
    "keyConcepts": [
      "strings",
      "lists",
      "average",
      "edge cases"
    ],
    "hintCount": 1,
    "hintsUsed": 1,
    "hintsUsedOverall": 2,
    "triedCount": 1,
    "textHintUsed": false,
    "codeHintUsed": true,
    "editorContent": "def average_word_length(sentence):\n  \n",
    "language": "python",
    "duggyFeedback": "Good attention to edge cases and clear logic.",
    "createdAt": "2025-07-24T14:48:13.281705"
  },
  {
    "prompt": "Create a Frequency Map of Characters",
    "task_name": "Character Frequency Counter",
    "solution": "def char_frequency(s):\n  freq = {}\n  for char in s:\n    if char in freq:\n      freq[char] += 1\n    else:\n      freq[char] = 1\n  return freq",
    "hintText": "Use a dictionary to count how often each character appears. Loop through the string and update the count for each character.",
    "hintCode": "def char_frequency(s):\n  freq = {}\n  # Loop through each character and count occurrences\n",
    "difficultyLevel": "beginner",
    "status": "Repeat",
    "attempts": 4,
    "successfulReviews": 0,
    "lastReviewDate": "2025-07-24T14:48:13.281745",
    "nextReviewDate": "2025-07-31T14:48:13.281745",
    "difficultyFactor": 2.5,
    "currentInterval": 5,
    "taskText": "Write a Python function that takes a string and returns a dictionary containing the frequency of each character. This should be case-sensitive and include spaces or special characters.",
    "taskCode": "def char_frequency(s):\n  # Create an empty dictionary\n  # Iterate over the string and update the dictionary\n",
    "keyConcepts": [
      "dictionary",
      "iteration",
      "frequency count"
    ],
    "hintCount": 1,
    "hintsUsed": 1,
    "hintsUsedOverall": 3,
    "triedCount": 1,
    "textHintUsed": false,
    "codeHintUsed": false,
    "editorContent": "def char_frequency(s):\n  \n",
    "language": "python",
    "duggyFeedback": "Good practice for using dictionaries and control flow.",
    "createdAt": "2025-07-24T14:48:13.281745"
  },
  {
    "prompt": "Implement a Custom Filter Function",
    "task_name": "Custom Array Filter",
    "solution": "function customFilter(arr, callback) {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (callback(arr[i], i, arr)) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}",
    "hintText": "Loop over the array and call the callback function on each element. If it returns true, add the element to the result array.",
    "hintCode": "function customFilter(arr, callback) {\n  const result = [];\n  // Loop through array and apply callback\n  // Push to result if callback returns true\n}",
    "difficultyLevel": "advanced",
    "status": "InProgress",
    "attempts": 2,
    "successfulReviews": 1,
    "lastReviewDate": "2025-07-24T14:48:13.281761",
    "nextReviewDate": "2025-07-25T14:48:13.281761",
    "difficultyFactor": 1.6,
    "currentInterval": 5,
    "taskText": "Write a JavaScript function that mimics the built-in Array.filter method. The function should accept an array and a callback function, and return a new array containing only the elements for which the callback returned true.",
    "taskCode": "function customFilter(arr, callback) {\n  // Create an empty array to hold the results\n  // Loop through each element and call the callback\n  // Add element to results if callback returns true\n}",
    "keyConcepts": [
      "array",
      "callback",
      "iteration",
      "functional programming"
    ],
    "hintCount": 1,
    "hintsUsed": 0,
    "hintsUsedOverall": 3,
    "triedCount": 5,
    "textHintUsed": true,
    "codeHintUsed": true,
    "editorContent": "function customFilter(arr, callback) {\n  \n}",
    "language": "javascript",
    "duggyFeedback": "Well-structured solution for a foundational method.",
    "createdAt": "2025-07-24T14:48:13.281761"
  },
  {
    "prompt": "Capitalize Every Other Letter",
    "task_name": "Alternate Capitalization",
    "solution": "function alternateCaps(str) {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += i % 2 === 0 ? str[i].toUpperCase() : str[i].toLowerCase();\n  }\n  return result;\n}",
    "hintText": "Use a loop and alternate between upper and lower case based on the index of the character.",
    "hintCode": "function alternateCaps(str) {\n  let result = '';\n  for (let i = 0; i < TODO; i++) {\n    // Loop through characters and change case depending on index\n  }\n  return TODO;\n}",
    "difficultyLevel": "intermediate",
    "status": "Backlog",
    "attempts": 0,
    "successfulReviews": 0,
    "lastReviewDate": "2025-07-24T14:48:13.281777",
    "nextReviewDate": "2025-08-03T14:48:13.281777",
    "difficultyFactor": 3.3,
    "currentInterval": 5,
    "taskText": "Write a JavaScript function that capitalizes every other character in a string, starting with an uppercase character. All even-indexed characters should be uppercase, and odd-indexed should be lowercase.",
    "taskCode": "function alternateCaps(str) {\n  // Initialize result string\n  // Iterate over each character and apply conditional capitalization\n}",
    "keyConcepts": [
      "string manipulation",
      "loops",
      "indexing"
    ],
    "hintCount": 0,
    "hintsUsed": 0,
    "hintsUsedOverall": 0,
    "triedCount": 0,
    "textHintUsed": false,
    "codeHintUsed": false,
    "editorContent": "function alternateCaps(str) {\n  \n}",
    "language": "javascript",
    "duggyFeedback": "Nice mix of string and index logic.",
    "createdAt": "2025-07-24T14:48:13.281777"
  },
  {
    "prompt": "Merge Two Dictionaries with Conflict Resolution",
    "task_name": "Merge Dicts",
    "solution": "def merge_dicts(dict1, dict2):\n  merged = dict1.copy()\n  for key, value in dict2.items():\n    if key in merged:\n      merged[key] += value\n    else:\n      merged[key] = value\n  return merged",
    "hintText": "Copy the first dictionary, then loop through the second and add values. If keys conflict, sum them.",
    "hintCode": "def merge_dicts(dict1, dict2):\n  # Copy dict1 and update with dict2\n  # If key exists, sum the values\n",
    "difficultyLevel": "advanced",
    "status": "Done",
    "attempts": 0,
    "successfulReviews": 2,
    "lastReviewDate": "2025-07-24T14:48:13.281791",
    "nextReviewDate": "2025-07-29T14:48:13.281791",
    "difficultyFactor": 3.4,
    "currentInterval": 4,
    "taskText": "Write a Python function that merges two dictionaries. If the same key appears in both, their values (assumed to be numeric) should be added together. The function should not modify the original dictionaries.",
    "taskCode": "def merge_dicts(dict1, dict2):\n  # Copy first dictionary\n  # Loop through the second and update values appropriately\n",
    "keyConcepts": [
      "dictionary",
      "merge",
      "conflict resolution"
    ],
    "hintCount": 1,
    "hintsUsed": 0,
    "hintsUsedOverall": 4,
    "triedCount": 4,
    "textHintUsed": false,
    "codeHintUsed": false,
    "editorContent": "def merge_dicts(dict1, dict2):\n  \n",
    "language": "python",
    "duggyFeedback": "Thoughtful approach to mutable data structures.",
    "createdAt": "2025-07-24T14:48:13.281791"
  }
]